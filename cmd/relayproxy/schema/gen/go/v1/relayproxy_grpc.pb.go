// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: v1/relayproxy.proto

package relayproxyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayProxyService_PostAllFlags_FullMethodName = "/relayproxy.v1.RelayProxyService/PostAllFlags"
)

// RelayProxyServiceClient is the client API for RelayProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayProxyServiceClient interface {
	PostAllFlags(ctx context.Context, in *AllFlagsRequest, opts ...grpc.CallOption) (*AllFlagsResponse, error)
}

type relayProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayProxyServiceClient(cc grpc.ClientConnInterface) RelayProxyServiceClient {
	return &relayProxyServiceClient{cc}
}

func (c *relayProxyServiceClient) PostAllFlags(ctx context.Context, in *AllFlagsRequest, opts ...grpc.CallOption) (*AllFlagsResponse, error) {
	out := new(AllFlagsResponse)
	err := c.cc.Invoke(ctx, RelayProxyService_PostAllFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayProxyServiceServer is the server API for RelayProxyService service.
// All implementations must embed UnimplementedRelayProxyServiceServer
// for forward compatibility
type RelayProxyServiceServer interface {
	PostAllFlags(context.Context, *AllFlagsRequest) (*AllFlagsResponse, error)
	mustEmbedUnimplementedRelayProxyServiceServer()
}

// UnimplementedRelayProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayProxyServiceServer struct {
}

func (UnimplementedRelayProxyServiceServer) PostAllFlags(context.Context, *AllFlagsRequest) (*AllFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAllFlags not implemented")
}
func (UnimplementedRelayProxyServiceServer) mustEmbedUnimplementedRelayProxyServiceServer() {}

// UnsafeRelayProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayProxyServiceServer will
// result in compilation errors.
type UnsafeRelayProxyServiceServer interface {
	mustEmbedUnimplementedRelayProxyServiceServer()
}

func RegisterRelayProxyServiceServer(s grpc.ServiceRegistrar, srv RelayProxyServiceServer) {
	s.RegisterService(&RelayProxyService_ServiceDesc, srv)
}

func _RelayProxyService_PostAllFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayProxyServiceServer).PostAllFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayProxyService_PostAllFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayProxyServiceServer).PostAllFlags(ctx, req.(*AllFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayProxyService_ServiceDesc is the grpc.ServiceDesc for RelayProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relayproxy.v1.RelayProxyService",
	HandlerType: (*RelayProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAllFlags",
			Handler:    _RelayProxyService_PostAllFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/relayproxy.proto",
}
